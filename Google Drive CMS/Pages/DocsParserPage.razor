@page "/docs/{PageID}"

@if (!isLoaded)
{
    <span>loading</span>
}
else
{
    @if (isError)
    {
        <span>Error 404, Page is missing.</span>
    }
    else
    {
        @((MarkupString)doc.Style)
        <div style="width: 100%; height: 100%;">
            <div style="width:20%; height: 100%;">
                @foreach (var tpl in doc.Headers)
                {
                    <button type="button" onclick="document.getElementById('@tpl.Item1').scrollIntoView({behavior:'smooth'})">@((MarkupString)tpl.Item2)</button>
                }
            </div>
            <div style="width:60%; height: 100%; overflow-y:hidden;">
                @((MarkupString)doc.Body)
            </div>
            <div style="width:20%; height: 100%;"></div>

        </div>
    }

}


@code 
{

    [Parameter]
    public string PageID { get; set; }
    [Inject]
    protected DocsParser docsParser { get; set; }
    DocsDTO doc;
    bool isLoaded => doc is not null;
    bool isError = false;
    [Inject]
    protected SpreadsheetsParser spreadsheetsParser { get; set; }
    List<string[]> list = new();
    protected override async Task OnParametersSetAsync()
    {
        list = await spreadsheetsParser.GetDataFromSpreadsheetsAsync(SpreadsheetsParser.UrlFromID("1-LoUqfKltw1AI9Dbu05UBsxeTszQ3RMWvPzbN6curac"));
        if (list.Count > 0)
        {
            list.RemoveAt(0);
        }
        string currentLink = list.FirstOrDefault(ss => ss.Length >= 2 && ss[0] == PageID, new string[] { "", "" })[1];
        isError = string.IsNullOrEmpty(currentLink);
        if (!isError)
        {
            doc = await docsParser.GetDocsAsync(currentLink);
        }
    }
}
